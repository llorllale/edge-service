// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Query query
//
// swagger:discriminated Query type
type Query interface {
	runtime.Validatable
	runtime.ContextValidatable

	// id
	ID() string
	SetID(string)

	// type
	// Required: true
	Type() string
	SetType(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type query struct {
	idField string

	typeField string
}

// ID gets the id of this polymorphic type
func (m *query) ID() string {
	return m.idField
}

// SetID sets the id of this polymorphic type
func (m *query) SetID(val string) {
	m.idField = val
}

// Type gets the type of this polymorphic type
func (m *query) Type() string {
	return "Query"
}

// SetType sets the type of this polymorphic type
func (m *query) SetType(val string) {
}

// UnmarshalQuerySlice unmarshals polymorphic slices of Query
func UnmarshalQuerySlice(reader io.Reader, consumer runtime.Consumer) ([]Query, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []Query
	for _, element := range elements {
		obj, err := unmarshalQuery(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalQuery unmarshals polymorphic Query
func UnmarshalQuery(reader io.Reader, consumer runtime.Consumer) (Query, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalQuery(data, consumer)
}

func unmarshalQuery(data []byte, consumer runtime.Consumer) (Query, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "DocQuery":
		var result DocQuery
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "Query":
		var result query
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "RefQuery":
		var result RefQuery
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)
}

// Validate validates this query
func (m *query) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this query based on context it is used
func (m *query) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
