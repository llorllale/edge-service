// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EqOp eq op
//
// swagger:model EqOp
type EqOp struct {
	argsField []Query
}

// Type gets the type of this subtype
func (m *EqOp) Type() string {
	return "EqOp"
}

// SetType sets the type of this subtype
func (m *EqOp) SetType(val string) {
}

// Args gets the args of this subtype
func (m *EqOp) Args() []Query {
	return m.argsField
}

// SetArgs sets the args of this subtype
func (m *EqOp) SetArgs(val []Query) {
	m.argsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *EqOp) UnmarshalJSON(raw []byte) error {
	var data struct {
		Args json.RawMessage `json:"args"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	allOfArgs, err := UnmarshalQuerySlice(bytes.NewBuffer(data.Args), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result EqOp

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.argsField = allOfArgs

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m EqOp) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
	}{})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`

		Args []Query `json:"args"`
	}{

		Type: m.Type(),

		Args: m.Args(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this eq op
func (m *EqOp) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArgs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EqOp) validateArgs(formats strfmt.Registry) error {

	if err := validate.Required("args", "body", m.Args()); err != nil {
		return err
	}

	iArgsSize := int64(len(m.Args()))

	if err := validate.MinItems("args", "body", iArgsSize, 2); err != nil {
		return err
	}

	for i := 0; i < len(m.Args()); i++ {

		if err := m.argsField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this eq op based on the context it is used
func (m *EqOp) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArgs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EqOp) contextValidateArgs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Args()); i++ {

		if err := m.argsField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("args" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EqOp) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EqOp) UnmarshalBinary(b []byte) error {
	var res EqOp
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
