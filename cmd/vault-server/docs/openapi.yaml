# Copyright SecureKey Technologies Inc.
#
# SPDX-License-Identifier: Apache-2.0

openapi: 3.0.0
info:
  title: Vault Server
  description: Vault Server
  version: 1.0.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /vaults:
    post:
      tags:
        - required
      description: Creates a new vault and DID for controlling the vault.
      responses:
        201:
          description: Vault created successfully. The DID used to reference and control the valut will be returned. The EDV and KMS details may be ignored but maybe useful for auditing purposes.
          headers:
            Location:
              description: Location of the vault.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Vault"
              example: {
                "id": "did:example:123",
                "edv": {
                  "uri": "https://edv.example.com/encrypted-data-vaults/123/documents/456",
                  "authToken": "123456789abcdefghi"
                },
                "kms": {
                  "uri": "https://kms.example.com/keystores/123/keys/456",
                  "authToken": "v6gmMNam3uVAjZpfkcJCwD"
                }
              }
        500:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      description: Deletes an existing vault.
      responses:
        200:
          description: Vault deleted. All contents of the vault have been purged and the controlling DID deactivated. 
        404:
          description: Vault does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vaults/{vaultID}/docs:
    parameters:
      - in: path
        name: vaultID
        required: true
        schema:
          type: string
        description: The ID of the vault (DID from the create method).
    post:
      tags:
        - required
      description: Create or update a document by encrypting it and storing it in the vault.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Document"
            example: {
              "id": "batphone",
              "content": {
                "phone_number": "+12125557972"
              }
            }
      responses:
        201:
          description: Document encrypted and stored successfully.
          headers:
            Location:
              description: Location of the document's metadata.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentMetadata"
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Vault not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vaults/{vaultID}/docs/{docID}/metadata:
    parameters:
      - in: path
        name: vaultID
        schema:
          type: string
        required: true
        description: The unique vault ID (DID from the create method).
      - in: path
        name: docID
        schema:
          type: string
        required: true
        description: The unique document ID ('id' from the Document create/update method)
    get:
      description: Metadata about a stored document.
      responses:
        200:
          description: The plaintext document.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentMetadata"
        404:
          description: Vault or document not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          description: An error occurred.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vaults/{vaultID}/authorizations:
    parameters:
      - in: path
        name: vaultID
        schema:
          type: string
        required: true
        description: The unique vault ID (DID from the create method).
    post:
      tags:
        - required
      description: Create an authorization for a party to gain access to a document in a vault for the stated purposes. The result details (tokens etc...) will be cached in the Vault Server, but the Client must manage the ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authorization"
            example: {
              "scope": {
                "target": "batphone",
                "actions": ["read"],
                "caveats": [
                  {
                    "type": "expiry",
                    "duration": 600
                  }
                ]
              },
              "requestingParty": "did:example:phone_dialer_47583"
            }
      responses:
        201:
          description: Authorization created.
          headers:
            Location:
              description: Location of the authorization.
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authorization"
              example: {
                "id": "AuZiD123",
                "scope": {
                  "target": "batphone",
                  "actions": ["read"],
                  "caveats": [
                    {
                      "type": "expiry",
                      "duration": 600
                    }
                  ]
                },
                "requestingParty": "did:example:phone_dialer_47583",
                "authTokens": {
                  "edv": "21tDAKCERh95uGgKbJNHYp",
                  "kms": "bcehfew7h32f32h7af3"
                }
              }
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Vault not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /vaults/{vaultID}/authorizations/{authorizationID}:
    parameters:
      - in: path
        name: vaultID
        schema:
          type: string
        required: true
        description: unique identifier for the vault.
      - in: path
        name: authorizationID
        schema:
          type: string
        required: true
        description: The 'id' returned from the authorization call.
    get:
      description: Fetch an authorization.
      responses:
        200:
          description: An authorization object.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authorization"
        404:
          description: Vault or authorization not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      description: Delete an authorization.
      responses:
        200:
          description: Authorization deleted.
        404:
          description: Vault or authorization not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Vault:
      type: object
      required:
        - id
        - edv
        - kms
      properties:
        id:
          type: string
          description: Unique identifier for the vault.
        edv:
          type: object
          properties:
            uri:
              type: string
              description: The unique URI to access the vault.
            authToken: 
              description: authorization object assigned to the DID to access the vault. These are opaque to the Client.
              type: string
        kms:
          type: object
          properties:
            uri:
              type: string
              description: The unique URI to access the encryption keys.
            authToken:
              description: authorization object assigned to the DID to access encryption keys. These are opaque to the Client.
              type: string
    Document:
      type: object
      required:
        - id
        - content
      properties:
        id:
          description: The client identifier to associate with the document. This may be any unique string to identify the document in the vault. Note this will be mapped to a EDV compliant document identifier (128-bit random) by the Vault Server.
          type: string
          example: "'batphone' or 'apple_pie_recipe' or 'x325519bpr'" 
        content:
          description: The JSON document to be encrypted and stored in the vault.
          type: object
    DocumentMetadata:
      type: object
      required:
        - docID
        - edvDocURI
      properties:
        docID:
          type: string
          description: The document ID of the stored document. MUST match the input 'id'.
        edvDocURI:
          type: string
          description: Unique URI for the document. This may be ignored by the Client but might be useful for auditing. This will contain the EDV - document ID.
    Authorization:
      description: An authorization object for an entity to request a document in a Vault.
      type: object
      required:
        - scope
        - requestingParty
      properties:
        id:
          description: a unique ID for this authorization. This will be ignored (and may be omitted) on input, but populated on output. 
          type: string
        scope:
          $ref: "#/components/schemas/Scope"
        requestingParty:
          description: keyID (DID) for the party able to use this authorization (for example, the application that can read the data).
          type: string
        authTokens:
          type: object
          description: the resulting authorization token(s). These are opaque to the client. These will be ignored if provided as input parameters.
          properties:
            edv:
              type: string
              description: the authorization token to access the document in the vault. Opaque for the client.
            kms:
              description: the authorization to access the decryption key in the KMS for the document. Opaque to the client.
              type: string
    Scope:
      type: object
      required:
        - target
        - actions
      properties:
        target:
          description: The target document ID.
          type: string
        targetAttr:
          description: a JSON path subset of the document to operate on.
          type: string
        actions:
          type: array
          description: the array of authorized action, like 'read' and 'write'.
          items:
            type: string
        caveats:
          type: array
          description: a list of limitations or exceptions to the authorization; for example and expiry time.
          items:
            $ref: "#/components/schemas/Caveat"
    Caveat:
      type: object
      required:
        - type
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          expiry: ExpiryCaveat
    ExpiryCaveat:
      allOf:
        - $ref: "#/components/schemas/Caveat"
        - type: object
          properties:
            duration:
              type: integer
              description: Duration (in seconds) for which this authorization will remain valid.
    Error:
      type: object
      properties:
        errMessage:
          type: string
          description: The human consumable error message.
